apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: k8slocalstoragerequiresafetoevict
spec:
  crd:
    spec:
      names:
        kind: K8sLocalStorageRequireSafeToEvict
      validation:
        openAPIV3Schema:
          type: object
          properties:
            annotations:
              type: array
              items:
                type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package k8slocalstoragerequiresafetoevict

        to_set(arr) = newSet {
          newSet = {x | x := arr[_]}
        }

        # Check if the required annotation is missing or set to false in the provided annotations
        is_missing_or_false_annotation(required, provided) {
          not provided[required]
        } else = true {
          provided[required] != "true"
        }

        violation[{"msg": msg, "details": {}}] {
          input.review.object.spec.volumes[_].emptyDir
          providedAnnotations := input.review.object.metadata.annotations
          requiredAnnotations := to_set(input.parameters.annotations)
          count({missingAnnotation | missingAnnotation = requiredAnnotations[_]; is_missing_or_false_annotation(missingAnnotation, providedAnnotations)}) > 0
          msg := sprintf("Pod is using local storage but doesn't have the required annotation '%v' set to true for eviction safety", [requiredAnnotations[_]])
        }

        violation[{"msg": msg, "details": {}}] {
          input.review.object.spec.volumes[_].hostPath
          providedAnnotations := input.review.object.metadata.annotations
          requiredAnnotations := to_set(input.parameters.annotations)
          count({missingAnnotation | missingAnnotation = requiredAnnotations[_]; is_missing_or_false_annotation(missingAnnotation, providedAnnotations)}) > 0
          msg := sprintf("Pod is using local storage but doesn't have the required annotation '%v' set to true for eviction safety", [requiredAnnotations[_]])
        }

